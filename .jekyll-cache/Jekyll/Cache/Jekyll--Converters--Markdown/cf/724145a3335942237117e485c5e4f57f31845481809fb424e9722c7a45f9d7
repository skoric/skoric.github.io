I"{d<p>I use <a href="https://developer.android.com/training/data-storage/room">Room</a> in this post to illustrate how you can configure your internal APIs for database management in clean way, so that you get more stable, easy to use and easy to update framework.</p>

<p>If you’re not familiar with <a href="https://developer.android.com/training/data-storage/room">Room</a>, it’s a popular library for Android that provides an abstraction layer over SQLite to allow fluent database access while harnessing the full power of SQLite. This post uses it to construct examples, but the topic itself is a bit broader and can be extended to other things like Firebase operations, or SQL operations using some other library, among other examples.</p>

<p>Also, this is just my approach. You might disagree or have something better, and that’s fine.</p>

<h2 id="room-components">Room components</h2>

<p>As you probably already know, in order to use Room, you need database, some models and DAOs (Data Access Objects) for them. So I’ll go ahead and create some simple ones.</p>

<blockquote>
  <p>Note: you’ll notice I mark some classes as <code class="language-plaintext highlighter-rouge">internal</code>. It’s because in my usual project setup, the database files are in separate module, and I mark the things I don’t want to expose to other modules as <code class="language-plaintext highlighter-rouge">internal</code>.  We’ll come back to this later.</p>
</blockquote>

<h3 id="database-configuration">Database configuration</h3>

<p>I like to keep my database configuration variables in a separate file so it’s easier to see the whole structure. I call this class <code class="language-plaintext highlighter-rouge">RoomDatabaseConfig</code> and make it a singleton object:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">internal</span> <span class="kd">object</span> <span class="nc">RoomDatabaseConfig</span> <span class="p">{</span>
  <span class="k">const</span> <span class="kd">val</span> <span class="py">DB_NAME</span> <span class="p">=</span> <span class="s">"MyDatabase"</span>
  <span class="k">const</span> <span class="kd">val</span> <span class="py">DB_TEST_NAME</span> <span class="p">=</span> <span class="s">"MyTestDatabase"</span>
  <span class="k">const</span> <span class="kd">val</span> <span class="py">DB_VERSION</span> <span class="p">=</span> <span class="mi">1</span>
	
  <span class="k">const</span> <span class="kd">val</span> <span class="py">TABLE_USERS</span> <span class="p">=</span> <span class="s">"users"</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="model">Model</h3>

<p>For this example, let’s use some stupid-simple model, e.g. <code class="language-plaintext highlighter-rouge">User</code> (like in the official documentation):</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span><span class="p">(</span><span class="n">tableName</span> <span class="p">=</span> <span class="nc">RoomDatabaseConfig</span><span class="p">.</span><span class="nc">TABLE_USERS</span><span class="p">)</span>
<span class="kd">data class</span> <span class="nc">User</span> <span class="p">{</span>
  <span class="nd">@PrimaryKey</span><span class="p">(</span><span class="n">autogenerate</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span> <span class="kd">val</span> <span class="py">id</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">firstName</span><span class="p">:</span> <span class="nc">String</span><span class="p">?,</span>
  <span class="kd">val</span> <span class="py">lastName</span><span class="p">:</span> <span class="nc">String</span><span class="p">?</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="dao">DAO</h3>

<p>In order to access this data, we need to create the DAO (Data Access Object) that will be able to perform defined database operations.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Dao</span>
<span class="k">internal</span> <span class="kd">interface</span> <span class="nc">UserDao</span> <span class="p">{</span>

  <span class="c1">// Read.</span>
	
  <span class="nd">@Query</span><span class="p">(</span><span class="s">"SELECT * FROM ${TABLE_USERS} WHERE id = :id LIMIT 1"</span><span class="p">)</span>
  <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">get</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="nc">Int</span><span class="p">):</span> <span class="nc">User</span><span class="p">?</span>
	
  <span class="nd">@Query</span><span class="p">(</span><span class="s">"SELECT * FROM ${TABLE_USERS}"</span><span class="p">)</span>
  <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">getAll</span><span class="p">():</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">User</span><span class="p">&gt;</span>
	
  <span class="c1">// Write</span>
	
  <span class="nd">@Insert</span><span class="p">(</span><span class="n">onConflict</span> <span class="p">=</span> <span class="nc">OnConflictStrategy</span><span class="p">.</span><span class="nc">REPLACE</span><span class="p">)</span>
  <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">insertOrUpdate</span><span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="nc">User</span><span class="p">)</span>
	
  <span class="nd">@Insert</span><span class="p">(</span><span class="n">onConflict</span> <span class="p">=</span> <span class="nc">OnConflictStrategy</span><span class="p">.</span><span class="nc">REPLACE</span><span class="p">)</span>
  <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">inserOrUpdate</span><span class="p">(</span><span class="n">users</span><span class="p">:</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">User</span><span class="p">&gt;)</span>
	
  <span class="c1">// Delete</span>
	
  <span class="nd">@Delete</span>
  <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">delete</span><span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="nc">User</span><span class="p">)</span>

  <span class="nd">@Query</span><span class="p">(</span><span class="s">"DELETE FROM ${TABLE_USERS}"</span><span class="p">)</span>
  <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">deleteAll</span><span class="p">()</span>
	
  <span class="c1">// Observe changes.</span>
	
  <span class="k">fun</span> <span class="nf">observe</span><span class="p">():</span> <span class="nc">Flow</span><span class="p">&lt;</span><span class="nc">List</span><span class="p">&lt;</span><span class="nc">User</span><span class="p">&gt;&gt;</span>

<span class="p">}</span>
</code></pre></div></div>

<p>All the users are marked with <code class="language-plaintext highlighter-rouge">suspend</code> because we’ll use them in Kotlin coroutines.</p>

<blockquote>
  <p>Small hint on naming: I usually like to keep function naming simple and precise, e.g. <code class="language-plaintext highlighter-rouge">insertOrUpdate()</code> is a bit more precise than something like <code class="language-plaintext highlighter-rouge">set()</code>. Also, I let the variable describe the data we’re manipulating, so <code class="language-plaintext highlighter-rouge">get(): User</code> instead of <code class="language-plaintext highlighter-rouge">getUser(): User</code>. I will use full names later in higher-level APIs, but in the context of each DAO, this naming is shorter and more consistent.</p>
</blockquote>

<h3 id="database">Database</h3>

<p>When initializing database, I usually provide functions for instantiating the production and test databases, along all the DAO getters.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Database</span><span class="p">(</span>
  <span class="n">entities</span> <span class="p">=</span> <span class="p">[</span><span class="nc">User</span><span class="o">::</span><span class="k">class</span><span class="p">],</span>
  <span class="n">version</span> <span class="p">=</span> <span class="nc">RoomDatabaseConfig</span><span class="p">.</span><span class="nc">DB_VERSION</span>
<span class="p">)</span>
<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">MyDatabase</span> <span class="p">:</span> <span class="nc">RoomDatabase</span> <span class="p">{</span>
  <span class="k">companion</span> <span class="k">object</span> <span class="p">{</span>
  
    <span class="k">private</span> <span class="kd">var</span> <span class="py">instance</span><span class="p">:</span> <span class="nc">MyDatabase</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
    <span class="k">private</span> <span class="kd">var</span> <span class="py">testInstance</span><span class="p">:</span> <span class="nc">MyDatabase</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
		
    <span class="k">fun</span> <span class="nf">getInstance</span><span class="p">(</span><span class="n">ctx</span><span class="p">:</span> <span class="nc">Context</span><span class="p">):</span> <span class="nc">MyDatabase</span> <span class="p">{</span>
      <span class="n">instance</span><span class="o">?.</span><span class="nf">let</span> <span class="p">{</span> <span class="k">return</span> <span class="n">it</span> <span class="p">}</span>
      <span class="n">instance</span> <span class="p">=</span> <span class="nc">Room</span>
        <span class="p">.</span><span class="nf">databaseBuilder</span><span class="p">(</span>
          <span class="n">ctx</span><span class="p">,</span> 
          <span class="nc">RoomDatabase</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">,</span> 
          <span class="nc">RoomDatabaseConfig</span><span class="p">.</span><span class="nc">DB_NAME</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">build</span><span class="p">()</span>
      <span class="k">return</span> <span class="n">instance</span><span class="o">!!</span>
    <span class="p">}</span>
	
    <span class="k">fun</span> <span class="nf">getTestInstance</span><span class="p">(</span><span class="n">ctx</span><span class="p">:</span> <span class="nc">Context</span><span class="p">):</span> <span class="nc">MyDatabase</span> <span class="p">{</span>
      <span class="n">testInstance</span><span class="o">?.</span><span class="nf">let</span> <span class="p">{</span> <span class="k">return</span> <span class="n">it</span> <span class="p">}</span>
      <span class="n">testInstance</span> <span class="p">=</span> <span class="nc">Room</span>
        <span class="p">.</span><span class="nf">databaseBuilder</span><span class="p">(</span>
          <span class="n">ctx</span><span class="p">,</span> 
          <span class="nc">RoomDatabase</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">,</span> 
          <span class="nc">RoomDatabaseConfig</span><span class="p">.</span><span class="nc">DB_TEST_NAME</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">build</span><span class="p">()</span>
      <span class="k">return</span> <span class="n">testInstance</span><span class="o">!!</span>
    <span class="p">}</span>
	
  <span class="p">}</span>
  
  <span class="k">internal</span> <span class="k">abstract</span> <span class="k">fun</span> <span class="nf">userDao</span><span class="p">():</span> <span class="nc">UserDao</span>

<span class="p">}</span>
</code></pre></div></div>

<h2 id="protocols-for-database-operations">Protocols for database operations</h2>

<p>When performing database operations, you will usually want to perform similar set of actions for each of the operations. One such example:</p>

<ol>
  <li>open the database</li>
  <li>perform the operation</li>
  <li>log the result</li>
  <li>throw any possible exceptions</li>
  <li>close the database</li>
</ol>

<p>I created a class for this, that will receive a coroutine dispatcher on which to execute database operations, and that defines possible read and write operations. I named this class <code class="language-plaintext highlighter-rouge">RoomDatabaseOperationProtocol</code>, but if you’re smart, you can probably come up with something a bit better :)</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">internal</span> <span class="kd">class</span> <span class="nc">RoomDatabaseOperationProtocol</span><span class="p">(</span>
  <span class="k">private</span> <span class="kd">val</span> <span class="py">dispacher</span><span class="p">:</span> <span class="nc">CoroutineDispatcher</span>
<span class="p">)</span> <span class="p">{</span>

  <span class="k">companion</span> <span class="k">object</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">const</span> <span class="kd">val</span> <span class="py">LOG_TAG</span> <span class="p">=</span> <span class="s">"RoomDatabase.Operation"</span>
  <span class="p">}</span>

  <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">executeWriteOperation</span><span class="p">(</span>
    <span class="n">operationName</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
    <span class="n">operation</span><span class="p">:</span> <span class="k">suspend</span> <span class="nc">CoroutineScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="nc">Unit</span>
  <span class="p">)</span> <span class="p">{</span>
    <span class="nf">withContext</span><span class="p">(</span><span class="n">dispatcher</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">try</span> <span class="p">{</span>
        <span class="nc">Log</span><span class="p">.</span><span class="nf">d</span><span class="p">(</span><span class="nc">LOG_TAG</span><span class="p">,</span> <span class="s">"[CALL] $operationName"</span><span class="p">)</span>
        <span class="n">operation</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
        <span class="nc">Log</span><span class="p">.</span><span class="nf">d</span><span class="p">(</span><span class="nc">LOG_TAG</span><span class="p">,</span> <span class="s">"[SUCCESS] $operationName"</span><span class="p">)</span>
      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">ex</span><span class="p">:</span> <span class="nc">Exception</span><span class="p">)</span> <span class="p">{</span>
        <span class="nc">Log</span><span class="p">.</span><span class="nf">e</span><span class="p">(</span><span class="nc">LOG_TAG</span><span class="p">,</span> <span class="s">"[FAILURE] $operationName"</span><span class="p">,</span> <span class="n">ex</span><span class="p">)</span>
        <span class="k">throw</span> <span class="n">ex</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="k">suspend</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="nf">executeReadOperation</span><span class="p">(</span>
    <span class="n">operationName</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
    <span class="n">operation</span><span class="p">:</span> <span class="k">suspend</span> <span class="nc">CoroutineScope</span><span class="p">().</span> <span class="p">-&gt;</span> <span class="nc">T</span>
  <span class="p">):</span> <span class="nc">T</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">withContext</span><span class="p">(</span><span class="n">dispatcher</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">try</span> <span class="p">{</span>
        <span class="nc">Log</span><span class="p">.</span><span class="nf">d</span><span class="p">(</span><span class="nc">LOG_TAG</span><span class="p">,</span> <span class="s">"[CALL] $operationName"</span><span class="p">)</span>
        <span class="kd">val</span> <span class="py">result</span> <span class="p">=</span> <span class="n">operation</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
        <span class="nc">Log</span><span class="p">.</span><span class="nf">d</span><span class="p">(</span><span class="nc">LOG_TAG</span><span class="p">,</span> <span class="s">"[SUCCESS] $operationName"</span><span class="p">)</span>
        <span class="n">result</span>
      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">ex</span><span class="p">:</span> <span class="nc">Exception</span><span class="p">)</span> <span class="p">{</span>
        <span class="nc">Log</span><span class="p">.</span><span class="nf">e</span><span class="p">(</span><span class="nc">LOG_TAG</span><span class="p">,</span> <span class="s">"[FAILURE] $operationName"</span><span class="p">,</span> <span class="n">ex</span><span class="p">)</span>
        <span class="k">throw</span> <span class="n">ex</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="k">fun</span> <span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="nf">executeObserveOperation</span><span class="p">(</span>
    <span class="n">operationName</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
    <span class="n">operation</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="nc">Flow</span><span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span>
  <span class="p">):</span> <span class="nc">Flow</span><span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">try</span> <span class="p">{</span>
      <span class="nc">Log</span><span class="p">.</span><span class="nf">d</span><span class="p">(</span><span class="nc">LOG_TAG</span><span class="p">,</span> <span class="s">"[CALL] $operationName"</span><span class="p">)</span>
      <span class="n">action</span><span class="p">.</span><span class="nf">invoke</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">flowOn</span><span class="p">(</span><span class="n">dispatcher</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">onEach</span> <span class="p">{</span> <span class="nc">Log</span><span class="p">.</span><span class="nf">d</span><span class="p">(</span><span class="nc">LOG_TAG</span><span class="p">,</span> <span class="s">"[SUCCESS] $operationName"</span><span class="p">)</span> <span class="p">}</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">ex</span><span class="p">:</span> <span class="nc">Exception</span><span class="p">)</span> <span class="p">{</span>
      <span class="nc">Log</span><span class="p">.</span><span class="nf">e</span><span class="p">(</span><span class="nc">LOG_TAG</span><span class="p">,</span> <span class="s">"[FAILURE] $operationName"</span><span class="p">,</span> <span class="n">ex</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
<span class="p">}</span>

</code></pre></div></div>

<p>Let’s see what we did here:</p>
<ul>
  <li>We’ve created a protocol for each of the possible operations: read, write, observe</li>
  <li>Each of the protocols will make sure the operations is executed on the proper dispatcher and it will log the operation being called</li>
  <li>Note: in the full implementation I also log the data being read/writen, but removed it here for simplicity</li>
</ul>

<h2 id="public-apis">Public APIs</h2>

<p>We’ve marked all the components that deal with data operations (DAOs, protocols) as <code class="language-plaintext highlighter-rouge">internal</code>. This means that the access to them is restricted to this module. I use separate module for data, but you can make it package private if you don’t have modules. The idea is to stop other components from accessing DAOs directly, but use the public APIs, which will make sure all the operations are performed on the correct thread following the defined protocols.</p>

<p>Since I use the Android’s <a href="https://developer.android.com/jetpack/guide">MVVM architecture</a>, which uses <code class="language-plaintext highlighter-rouge">Repository</code> suffix for the classes that serve as the data source, I named the class with public APIs <code class="language-plaintext highlighter-rouge">RoomDatabaseRepository</code>, but you can of course use whatever you like.</p>

<p>In this class, we will define all the public APIs for database operations, and then use DAOs to execute them following the specified database protocols:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">RoomDatabaseRepository</span><span class="p">(</span>
  <span class="k">private</span> <span class="kd">val</span> <span class="py">db</span><span class="p">:</span> <span class="nc">MyRoomDatabase</span><span class="p">,</span>
  <span class="k">private</span> <span class="kd">val</span> <span class="py">dispatcher</span><span class="p">:</span> <span class="nc">CoroutineDispatcher</span>
<span class="p">)</span> <span class="p">{</span>

  <span class="k">private</span> <span class="kd">val</span> <span class="py">protocol</span> <span class="p">=</span> <span class="nc">RoomDatabaseOperationProtocol</span><span class="p">(</span><span class="n">dispatcher</span><span class="p">)</span>

  <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">getUser</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="nc">Int</span><span class="p">):</span> <span class="nc">User</span><span class="p">?</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">protocol</span><span class="p">.</span><span class="nf">executeReadOperation</span><span class="p">(</span><span class="s">"getUser"</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">db</span><span class="p">.</span><span class="nf">userDao</span><span class="p">().</span><span class="k">get</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">getAllUsers</span><span class="p">():</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">User</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">protocol</span><span class="p">.</span><span class="nf">executeReadOperations</span><span class="p">(</span><span class="s">"getAllUsers"</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">db</span><span class="p">.</span><span class="nf">userDao</span><span class="p">().</span><span class="nf">getAll</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">insertOrUpdateUser</span><span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="nc">User</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">protocol</span><span class="p">.</span><span class="nf">executeWriteOpration</span><span class="p">(</span><span class="s">"inserOrUpdateUser"</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">db</span><span class="p">.</span><span class="nf">userDao</span><span class="p">().</span><span class="nf">insertOrUpdate</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">inserOrUpdateUsers</span><span class="p">(</span><span class="n">users</span><span class="p">:</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">User</span><span class="p">&gt;)</span> <span class="p">{</span>
    <span class="n">protocol</span><span class="p">.</span><span class="nf">executeWriteOpration</span><span class="p">(</span><span class="s">"inserOrUpdateUsers"</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">db</span><span class="p">.</span><span class="nf">userDao</span><span class="p">().</span><span class="nf">insertOrUpdate</span><span class="p">(</span><span class="n">users</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

:ET